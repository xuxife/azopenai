//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package azopenai

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// CompletionsClient contains the methods for the Completions group.
// Don't use this type directly, use NewCompletionsClient() instead.
type CompletionsClient struct {
	internal *arm.Client
}

// NewCompletionsClient creates a new instance of CompletionsClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewCompletionsClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*CompletionsClient, error) {
	cl, err := arm.NewClient(moduleName+".CompletionsClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &CompletionsClient{
	internal: cl,
	}
	return client, nil
}

// Create - Creates a completion for the provided prompt, parameters and chosen model.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-15-preview
//   - options - CompletionsClientCreateOptions contains the optional parameters for the CompletionsClient.Create method.
func (client *CompletionsClient) Create(ctx context.Context, deploymentID string, body Paths1Vtxb06DeploymentsDeploymentIDCompletionsPostRequestbodyContentApplicationJSONSchema, options *CompletionsClientCreateOptions) (CompletionsClientCreateResponse, error) {
	req, err := client.createCreateRequest(ctx, deploymentID, body, options)
	if err != nil {
		return CompletionsClientCreateResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return CompletionsClientCreateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return CompletionsClientCreateResponse{}, runtime.NewResponseError(resp)
	}
	return client.createHandleResponse(resp)
}

// createCreateRequest creates the Create request.
func (client *CompletionsClient) createCreateRequest(ctx context.Context, deploymentID string, body Paths1Vtxb06DeploymentsDeploymentIDCompletionsPostRequestbodyContentApplicationJSONSchema, options *CompletionsClientCreateOptions) (*policy.Request, error) {
	host := "https://{endpoint}/openai"
	host = strings.ReplaceAll(host, "{endpoint}", endpoint)
	urlPath := "/deployments/{deployment-id}/completions"
	if deploymentID == "" {
		return nil, errors.New("parameter deploymentID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{deployment-id}", url.PathEscape(deploymentID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, body)
}

// createHandleResponse handles the Create response.
func (client *CompletionsClient) createHandleResponse(resp *http.Response) (CompletionsClientCreateResponse, error) {
	result := CompletionsClientCreateResponse{}
	if val := resp.Header.Get("apim-request-id"); val != "" {
		result.ApimRequestID = &val
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.PathsMaorw9DeploymentsDeploymentIDCompletionsPostResponses200ContentApplicationJSONSchema); err != nil {
		return CompletionsClientCreateResponse{}, err
	}
	return result, nil
}

